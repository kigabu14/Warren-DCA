"""
AI DCA Helper Module
Provides AI analysis for DCA optimization results with provider abstraction
"""

import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from abc import ABC, abstractmethod


class AIProvider(ABC):
    """Abstract base class for AI providers"""
    
    @abstractmethod
    def generate_analysis(self, prompt: str, max_tokens: int = 1000) -> str:
        """Generate AI analysis from prompt"""
        pass
    
    @abstractmethod
    def is_configured(self) -> bool:
        """Check if the provider is properly configured"""
        pass


class GeminiProvider(AIProvider):
    """Google Gemini AI provider"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        self._client = None
        
        if api_key:
            try:
                import google.generativeai as genai
                genai.configure(api_key=api_key)
                self._client = genai.GenerativeModel('gemini-pro')
            except ImportError:
                print("Warning: google-generativeai package not installed")
            except Exception as e:
                print(f"Warning: Failed to initialize Gemini: {e}")
    
    def generate_analysis(self, prompt: str, max_tokens: int = 1000) -> str:
        """Generate analysis using Gemini"""
        if not self._client:
            return "‚ùå Gemini API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key)"
        
        try:
            response = self._client.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Gemini API: {str(e)}"
    
    def is_configured(self) -> bool:
        """Check if Gemini is properly configured"""
        return self._client is not None


class OpenAIProvider(AIProvider):
    """OpenAI GPT provider"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        self._client = None
        
        if api_key:
            try:
                import openai
                self._client = openai.OpenAI(api_key=api_key)
            except ImportError:
                print("Warning: openai package not installed")
            except Exception as e:
                print(f"Warning: Failed to initialize OpenAI: {e}")
    
    def generate_analysis(self, prompt: str, max_tokens: int = 1000) -> str:
        """Generate analysis using OpenAI GPT"""
        if not self._client:
            return "‚ùå OpenAI API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key)"
        
        try:
            response = self._client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=0.7
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô OpenAI API: {str(e)}"
    
    def is_configured(self) -> bool:
        """Check if OpenAI is properly configured"""
        return self._client is not None


class DCAAnalysisHelper:
    """Main DCA AI analysis helper with provider abstraction"""
    
    def __init__(self):
        self.providers = {}
    
    def add_provider(self, name: str, provider: AIProvider):
        """Add an AI provider"""
        self.providers[name] = provider
    
    def setup_gemini(self, api_key: str):
        """Setup Gemini provider"""
        provider = GeminiProvider(api_key)
        self.add_provider('gemini', provider)
        return provider.is_configured()
    
    def setup_openai(self, api_key: str):
        """Setup OpenAI provider"""
        provider = OpenAIProvider(api_key)
        self.add_provider('openai', provider)
        return provider.is_configured()
    
    def get_available_providers(self) -> List[str]:
        """Get list of configured providers"""
        return [name for name, provider in self.providers.items() if provider.is_configured()]
    
    def _compress_optimization_results(self, optimization_results: Dict, max_results: int = 5) -> Dict:
        """Compress optimization results for efficient AI processing"""
        compressed = {
            'ticker': optimization_results.get('ticker', ''),
            'strategy': optimization_results.get('strategy', ''),
            'total_combinations_tested': optimization_results.get('total_combinations_tested', 0),
            'ranking_criteria': optimization_results.get('ranking_criteria', ''),
            'top_results': []
        }
        
        # Get top N results
        all_results = optimization_results.get('all_results', [])
        top_results = all_results[:max_results]
        
        for result in top_results:
            compressed_result = {
                'rank': result.get('rank', 0),
                'parameters': result.get('parameters', {}),
                'total_return_pct': result.get('total_return_pct', 0),
                'cost_basis': result.get('cost_basis', 0),
                'total_invested': result.get('total_invested', 0),
                'max_drawdown_pct': result.get('max_drawdown_pct', 0),
                'sharpe_ratio': result.get('sharpe_ratio', 0),
                'break_even_achieved': result.get('break_even_achieved', False),
                'break_even_forecast': result.get('break_even_forecast', {}),
                'time_in_profit_pct': result.get('time_in_profit_pct', 0)
            }
            compressed['top_results'].append(compressed_result)
        
        return compressed
    
    def _create_single_ticker_prompt(self, compressed_results: Dict) -> str:
        """Create analysis prompt for single ticker results"""
        
        ticker = compressed_results['ticker']
        strategy = compressed_results['strategy']
        top_result = compressed_results['top_results'][0] if compressed_results['top_results'] else {}
        
        prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç DCA (Dollar Cost Averaging) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û DCA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô {ticker} ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå {strategy}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∏‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {compressed_results.get('total_combinations_tested', 0)}
- ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö: {compressed_results.get('ranking_criteria', '')}

‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å:
"""
        
        for i, result in enumerate(compressed_results['top_results'][:5]):
            prompt += f"""
‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {i+1}:
- ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {json.dumps(result['parameters'], ensure_ascii=False)}
- ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏£‡∏ß‡∏°: {result['total_return_pct']:.2f}%
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠: {result['cost_basis']:.2f}
- ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {result['total_invested']:,.0f}
- Drawdown ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {result['max_drawdown_pct']:.2f}%
- Sharpe Ratio: {result['sharpe_ratio']:.3f}
- ‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {'‡πÉ‡∏ä‡πà' if result['break_even_achieved'] else '‡πÑ‡∏°‡πà'}
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£: {result['time_in_profit_pct']:.1f}%
"""

        prompt += """

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö bullet points:

üéØ **‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
- [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•]

‚ö° **‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**
- [‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î]

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:**
- [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á overfitting ‡∏´‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢]

üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**
- [‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°]

üìä **‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô:**
- [‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°]
"""
        
        return prompt
    
    def _create_multi_ticker_prompt(self, multi_ticker_results: Dict) -> str:
        """Create analysis prompt for multi-ticker results"""
        
        prompt = """
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç DCA ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û DCA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô

‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô:
"""
        
        summary_by_ticker = multi_ticker_results.get('summary_by_ticker', {})
        
        for ticker, summary in summary_by_ticker.items():
            if summary:
                prompt += f"""
{ticker}:
- ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {summary.get('strategy', 'N/A')}
- ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô: {summary.get('metrics', {}).get('total_return_pct', 0):.2f}%
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠: {summary.get('metrics', {}).get('cost_basis', 0):.2f}
- Sharpe Ratio: {summary.get('metrics', {}).get('sharpe_ratio', 0):.3f}
- ‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {'‡πÉ‡∏ä‡πà' if summary.get('metrics', {}).get('break_even_achieved', False) else '‡πÑ‡∏°‡πà'}
"""
        
        prompt += """

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö bullet points:

üèÜ **‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
- [‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á]

üí∞ **‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô:**
- [‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô]

‚öñÔ∏è **‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:**
- [‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô]

üéØ **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡∏£‡∏ß‡∏°:**
- ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° DCA
- ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏ß‡∏£‡∏•‡∏î DCA  
- ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î DCA ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:**
- [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÅ‡∏°‡πâ]

üìà **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß:**
- [‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß]
"""
        
        return prompt
    
    def analyze_single_ticker(self, optimization_results: Dict, 
                            provider_name: str = 'auto') -> str:
        """
        Generate AI analysis for single ticker optimization results
        
        Args:
            optimization_results: Results from DCAOptimizer
            provider_name: AI provider to use ('auto', 'gemini', 'openai')
            
        Returns:
            AI analysis in Thai
        """
        if not self.providers:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API key"
        
        # Select provider
        if provider_name == 'auto':
            available = self.get_available_providers()
            if not available:
                return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            provider_name = available[0]  # Use first available
        
        if provider_name not in self.providers:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö provider '{provider_name}'"
        
        provider = self.providers[provider_name]
        if not provider.is_configured():
            return f"‚ùå Provider '{provider_name}' ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        
        try:
            # Compress results for AI processing
            compressed = self._compress_optimization_results(optimization_results)
            
            # Create prompt
            prompt = self._create_single_ticker_prompt(compressed)
            
            # Generate analysis
            analysis = provider.generate_analysis(prompt, max_tokens=1500)
            
            # Add metadata
            metadata = f"""
---
üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå**
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢: {provider_name.title()}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M')}
- ‡∏´‡∏∏‡πâ‡∏ô: {compressed['ticker']}
- ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {compressed['strategy']}
- ‡∏ä‡∏∏‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {compressed['total_combinations_tested']}

---
"""
            
            return metadata + analysis
            
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"
    
    def analyze_multi_ticker(self, multi_ticker_results: Dict, 
                           provider_name: str = 'auto') -> str:
        """
        Generate AI analysis for multi-ticker optimization results
        
        Args:
            multi_ticker_results: Results from multi-ticker optimization
            provider_name: AI provider to use
            
        Returns:
            AI analysis in Thai
        """
        if not self.providers:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API key"
        
        # Select provider
        if provider_name == 'auto':
            available = self.get_available_providers()
            if not available:
                return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            provider_name = available[0]
        
        if provider_name not in self.providers:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö provider '{provider_name}'"
        
        provider = self.providers[provider_name]
        if not provider.is_configured():
            return f"‚ùå Provider '{provider_name}' ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        
        try:
            # Create prompt
            prompt = self._create_multi_ticker_prompt(multi_ticker_results)
            
            # Generate analysis
            analysis = provider.generate_analysis(prompt, max_tokens=2000)
            
            # Add metadata
            tickers = list(multi_ticker_results.get('summary_by_ticker', {}).keys())
            
            metadata = f"""
---
üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏ß‡∏°**
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢: {provider_name.title()}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M')}
- ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {', '.join(tickers)}
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô: {len(tickers)}

---
"""
            
            return metadata + analysis
            
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"
    
    def analyze_break_even_forecast(self, metrics: Dict, 
                                  monte_carlo_results: Optional[Dict] = None,
                                  provider_name: str = 'auto') -> str:
        """
        Generate detailed break-even analysis
        
        Args:
            metrics: DCA metrics including break-even info
            monte_carlo_results: Optional Monte Carlo simulation results
            provider_name: AI provider to use
            
        Returns:
            Break-even analysis in Thai
        """
        if not self.providers:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        
        # Select provider
        if provider_name == 'auto':
            available = self.get_available_providers()
            if not available:
                return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            provider_name = available[0]
        
        provider = self.providers[provider_name]
        if not provider.is_configured():
            return f"‚ùå Provider '{provider_name}' ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        
        try:
            # Create detailed break-even prompt
            prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô (Break-even) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DCA

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏´‡∏∏‡πâ‡∏ô: {metrics.get('ticker', 'N/A')}
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠: {metrics.get('cost_basis', 0):.2f}
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {metrics.get('final_price', 0):.2f}
- ‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {'‡πÉ‡∏ä‡πà' if metrics.get('break_even_achieved', False) else '‡πÑ‡∏°‡πà'}

‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô:
{json.dumps(metrics.get('break_even_forecast', {}), ensure_ascii=False, indent=2)}
"""

            if monte_carlo_results:
                prompt += f"""

‡∏ú‡∏• Monte Carlo Simulation:
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô: {monte_carlo_results.get('break_even_probability', 0)*100:.1f}%
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô (Median): {monte_carlo_results.get('median_days_to_breakeven', 'N/A')} ‡∏ß‡∏±‡∏ô
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô (75th percentile): {monte_carlo_results.get('percentile_75_days', 'N/A')} ‡∏ß‡∏±‡∏ô
"""

            prompt += """

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:

üéØ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô:**
- [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô]

üìä **‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:**
- [‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤]

‚ö†Ô∏è **‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:**
- [‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á]

üí° **‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
- [‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô]

üîÆ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠:**
- [‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå]
"""
            
            analysis = provider.generate_analysis(prompt, max_tokens=1200)
            
            return f"""
---
üìã **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô (Break-even Analysis)**
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢: {provider_name.title()}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M')}

---
{analysis}
"""
            
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô: {str(e)}"
    
    def create_summary_report(self, optimization_summary: Dict, 
                            provider_name: str = 'auto') -> str:
        """
        Create comprehensive summary report
        
        Args:
            optimization_summary: Complete optimization results
            provider_name: AI provider to use
            
        Returns:
            Comprehensive summary report in Thai
        """
        if not self.providers:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ AI provider ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        
        # Combine individual analyses
        multi_ticker_analysis = self.analyze_multi_ticker(optimization_summary, provider_name)
        
        # Add executive summary
        try:
            tickers = optimization_summary.get('tickers_optimized', [])
            strategies = optimization_summary.get('strategies_tested', [])
            
            executive_summary = f"""
# üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û DCA

## üéØ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
- **‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:** {len(tickers)} ‡∏ï‡∏±‡∏ß ({', '.join(tickers)})
- **‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:** {len(strategies)} ‡πÅ‡∏ö‡∏ö
- **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:** {datetime.now().strftime('%Y-%m-%d %H:%M')}

---

{multi_ticker_analysis}

---

## üìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
- ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
- ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏ß‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô
"""
            
            return executive_summary
            
        except Exception as e:
            return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ: {str(e)}"