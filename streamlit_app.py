import streamlit as st
import yfinance as yf
import pandas as pd
import io

st.set_page_config(page_title="Warren-DCA: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞ DCA (‡∏Ñ‡∏£‡∏ö‡∏™‡∏π‡∏ï‡∏£)", layout="wide")
st.title("Warren-DCA: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞ DCA (Buffett 11 ‡∏Ç‡πâ‡∏≠ + DCA + Export Excel)")

# ----------------- SET100 Thailand -----------------
set100 = [
    "ADVANC.BK", "AOT.BK", "AP.BK", "AWC.BK", "BAM.BK", "BANPU.BK", "BBL.BK", "BCP.BK", "BDMS.BK", "BEC.BK",
    "BEM.BK", "BGRIM.BK", "BH.BK", "BJC.BK", "BLA.BK", "BPP.BK", "BTS.BK", "CBG.BK", "CENTEL.BK", "CHG.BK",
    "CK.BK", "COM7.BK", "CPALL.BK", "CPF.BK", "CPN.BK", "CRC.BK", "DELTA.BK", "DOHOME.BK", "DTAC.BK", "EGCO.BK",
    "EPG.BK", "ESSO.BK", "GLOBAL.BK", "GPSC.BK", "GULF.BK", "HANA.BK", "HMPRO.BK", "INTUCH.BK", "IRPC.BK",
    "IVL.BK", "JMART.BK", "JMT.BK", "KBANK.BK", "KCE.BK", "KEX.BK", "KTB.BK", "KTC.BK", "LH.BK", "M.BK",
    "MINT.BK", "MTC.BK", "OR.BK", "OSP.BK", "PLANB.BK", "PRM.BK", "PTG.BK", "PTT.BK", "PTTEP.BK", "PTTGC.BK",
    "QH.BK", "RATCH.BK", "RS.BK", "SAWAD.BK", "SCB.BK", "SCC.BK", "SCGP.BK", "SGP.BK", "SIRI.BK", "SPALI.BK",
    "STA.BK", "STARK.BK", "STEC.BK", "STGT.BK", "STPI.BK", "SUPER.BK", "TASCO.BK", "TCAP.BK", "THANI.BK",
    "THG.BK", "TISCO.BK", "TKN.BK", "TMB.BK", "TOA.BK", "TOP.BK", "TRUE.BK", "TTB.BK", "TU.BK", "TVO.BK",
    "VGI.BK", "WHA.BK"
]
us_stocks = [
    "AAPL", "TSLA", "NVDA", "GOOG", "MSFT", "SBUX", "AMD", "BABA", "T", "WMT",
    "SONY", "KO", "MCD", "MCO", "SNAP", "DIS", "NFLX", "GPRO", "CCL", "PLTR", "CBOE", "HD", "F", "COIN"
]
all_tickers = us_stocks + set100

# ----------------- Buffett 11 Checklist -----------------
def buffett_11_checks(financials, balance_sheet, cashflow, dividends, hist_prices):
    summary = {}
    # 1. ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 3-4 ‡∏õ‡∏µ
    try:
        net_income = financials.loc[[i for i in financials.index if "Net Income" in i][0]]
        summary["1. ‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"] = bool((net_income > 0).all())
    except Exception:
        summary["1. ‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"] = "N/A"

    # 2. ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≠‡∏¢ (Debt/Equity < 0.5)
    try:
        total_liab = balance_sheet.loc[[i for i in balance_sheet.index if "Total Liab" in i][0]]
        equity = balance_sheet.loc[[i for i in balance_sheet.index if "Total Stockholder Equity" in i][0]]
        debt_equity = (total_liab / equity).mean()
        summary["2. ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≠‡∏¢ (D/E < 0.5)"] = debt_equity < 0.5
    except Exception:
        summary["2. ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≠‡∏¢ (D/E < 0.5)"] = "N/A"

    # 3. ROE > 15%
    try:
        net_income = financials.loc[[i for i in financials.index if "Net Income" in i][0]]
        equity = balance_sheet.loc[[i for i in balance_sheet.index if "Total Stockholder Equity" in i][0]]
        roe = (net_income / equity).mean()
        summary["3. ROE > 15%"] = roe > 0.15
    except Exception:
        summary["3. ROE > 15%"] = "N/A"

    # 4. Net Profit Margin > 10%
    try:
        revenue = financials.loc[[i for i in financials.index if "Total Revenue" in i][0]]
        net_income = financials.loc[[i for i in financials.index if "Net Income" in i][0]]
        margin = (net_income / revenue).mean()
        summary["4. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ > 10%"] = margin > 0.10
    except Exception:
        summary["4. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ > 10%"] = "N/A"

    # 5. ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
    try:
        ocf = cashflow.loc[[i for i in cashflow.index if "Total Cash From Operating Activities" in i][0]]
        summary["5. ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å"] = (ocf > 0).all()
    except Exception:
        summary["5. ‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å"] = "N/A"

    # 6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏ó‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á)
    summary["6. ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏ó‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"] = "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á"

    # 7. ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
    try:
        revenue = financials.loc[[i for i in financials.index if "Total Revenue" in i][0]]
        summary["7. ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"] = revenue.iloc[0] < revenue.iloc[-1]
    except Exception:
        summary["7. ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"] = "N/A"
    # 8. ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
    try:
        net_income = financials.loc[[i for i in financials.index if "Net Income" in i][0]]
        summary["8. ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"] = net_income.iloc[0] < net_income.iloc[-1]
    except Exception:
        summary["8. ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"] = "N/A"

    # 9. Current ratio > 1
    try:
        current_assets = balance_sheet.loc[[i for i in balance_sheet.index if "Total Current Assets" in i][0]]
        current_liab = balance_sheet.loc[[i for i in balance_sheet.index if "Total Current Liabilities" in i][0]]
        current_ratio = (current_assets / current_liab).mean()
        summary["9. Current Ratio > 1"] = current_ratio > 1
    except Exception:
        summary["9. Current Ratio > 1"] = "N/A"

    # 10. Margin of Safety (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á)
    summary["10. ‡∏°‡∏µ Margin of Safety"] = "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á"

    # 11. ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
    try:
        summary["11. ‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"] = len(dividends) > 0 and (dividends > 0).any()
    except Exception:
        summary["11. ‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"] = "N/A"

    return summary

# ----------------- DCA Simulation -----------------
def dca_simulation(hist_prices: pd.DataFrame, monthly_invest: float = 1000):
    if hist_prices.empty:
        return {"error": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô"}
    prices = hist_prices['Close'].resample('M').first().dropna()
    units = monthly_invest / prices
    total_units = units.sum()
    total_invested = monthly_invest * len(prices)
    avg_buy_price = total_invested / total_units if total_units != 0 else 0
    latest_price = prices.iloc[-1]
    current_value = total_units * latest_price
    profit = current_value - total_invested
    return {
        "‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°": round(total_invested, 2),
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏°": round(total_units, 4),
        "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô": round(current_value, 2),
        "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô": round(profit, 2),
        "‡∏Å‡∏≥‡πÑ‡∏£(%)": round(profit/total_invested*100, 2) if total_invested != 0 else 0,
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠": round(avg_buy_price, 2),
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": round(latest_price, 2)
    }

# ----------------- UI -----------------
tickers = st.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô (US & SET100)",
    all_tickers,
    default=["AAPL", "PTT.BK"]
)
period = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô", ["1y", "5y", "max"], index=1)
monthly_invest = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô DCA ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ö‡∏≤‡∏ó‡∏´‡∏£‡∏∑‡∏≠ USD)", min_value=100.0, max_value=10000.0, value=1000.0, step=100.0)
show_financials = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (Income Statement)", value=False)

if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
    export_list = []
    for ticker in tickers:
        st.header(f"‡∏´‡∏∏‡πâ‡∏ô: {ticker}")
        stock = yf.Ticker(ticker)

        fin = stock.financials
        bs = stock.balance_sheet
        cf = stock.cashflow
        div = stock.dividends
        hist = stock.history(period=period)

        # --- Buffett Score 11 ‡∏Ç‡πâ‡∏≠ ---
        st.subheader("Buffett 11 Checklist")
        buffett_checks = buffett_11_checks(fin, bs, cf, div, hist)
        st.write(pd.DataFrame(buffett_checks, index=['‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå']).T)

        # --- DCA Simulation ---
        st.subheader("DCA Simulation (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
        dca_result = dca_simulation(hist, monthly_invest)
        st.write(pd.DataFrame(dca_result, index=['‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•']).T)

        # --- Chart ---
        if not hist.empty:
            st.line_chart(hist['Close'])
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô")

        # --- Financials ---
        if show_financials and fin is not None and not fin.empty:
            st.subheader("‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (Income Statement)")
            st.dataframe(fin)

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
        export_list.append({
            "‡∏´‡∏∏‡πâ‡∏ô": ticker,
            **buffett_checks,
            **dca_result
        })

    # --- Export to Excel ---
    if len(export_list) > 0:
        df_export = pd.DataFrame(export_list)
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_export.to_excel(writer, index=False, sheet_name='WarrenDCA')
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Excel",
            data=output.getvalue(),
            file_name='WarrenDCA_Result.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

st.caption("Powered by Yahoo Finance | ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Buffett Checklist ‡πÅ‡∏•‡∏∞ DCA ‡∏û‡∏£‡πâ‡∏≠‡∏° Export Excel (‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏ó‡∏¢)")
