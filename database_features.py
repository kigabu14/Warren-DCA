"""
Database features for Streamlit app.
Contains components for managing stored stock data and historical analysis.
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Any
import plotly.graph_objects as go
import plotly.express as px

from enhanced_data_loader import EnhancedDCADataLoader


class DatabaseFeatures:
    """Class to handle database-related features in Streamlit app."""
    
    def __init__(self):
        """Initialize database features."""
        # Use mock data mode in sandboxed environment
        self.enhanced_loader = EnhancedDCADataLoader(use_mock_data=True)
    
    def render_data_storage_section(self):
        """Render the data storage and historical analysis section."""
        st.header("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
        
        # Create tabs for different functionalities
        tab1, tab2, tab3, tab4 = st.tabs([
            "‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ", 
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", 
            "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        ])
        
        with tab1:
            self._render_data_fetching_section()
        
        with tab2:
            self._render_stored_data_section()
        
        with tab3:
            self._render_historical_analysis_section()
        
        with tab4:
            self._render_data_management_section()
    
    def _render_data_fetching_section(self):
        """Render data fetching and storage section."""
        st.subheader("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            ticker = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô", 
                placeholder="‡πÄ‡∏ä‡πà‡∏ô AAPL, MSFT, ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK", 
                help="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )
        
        with col2:
            period_options = {
                "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 1,
                "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 3,
                "6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 6,
                "1 ‡∏õ‡∏µ": 12,
                "2 ‡∏õ‡∏µ": 24,
                "5 ‡∏õ‡∏µ": 60
            }
            
            selected_period = st.selectbox(
                "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                options=list(period_options.keys()),
                index=3,  # Default to 1 year
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )
        
        if st.button("üîÑ ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
            if ticker:
                with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {selected_period}..."):
                    try:
                        months = period_options[selected_period]
                        data = self.enhanced_loader.fetch_historical_data_for_period(ticker.upper(), months)
                        
                        if data:
                            st.success(f"‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            
                            # Show preview of stored data
                            self._show_data_preview(ticker.upper(), data)
                        else:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô")
                    
                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô")
    
    def _render_stored_data_section(self):
        """Render stored data viewing section."""
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # Get list of stored stocks
        stored_stocks = self.enhanced_loader.list_stored_stocks()
        
        if not stored_stocks:
            st.info("üìã ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        # Display stored stocks table
        df_stocks = pd.DataFrame(stored_stocks)
        df_stocks['last_updated'] = pd.to_datetime(df_stocks['last_updated']).dt.strftime('%Y-%m-%d %H:%M')
        
        st.dataframe(
            df_stocks,
            column_config={
                "ticker": st.column_config.TextColumn("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô"),
                "company_name": st.column_config.TextColumn("‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"),
                "sector": st.column_config.TextColumn("‡∏†‡∏≤‡∏Ñ"),
                "industry": st.column_config.TextColumn("‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°"),
                "last_updated": st.column_config.TextColumn("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            },
            use_container_width=True,
            hide_index=True
        )
        
        # Stock selection for detailed view
        stock_options = [f"{row['ticker']} - {row['company_name'] or 'N/A'}" for row in stored_stocks]
        selected_stock = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            options=stock_options,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
        )
        
        if selected_stock:
            ticker = selected_stock.split(" - ")[0]
            self._show_detailed_stock_data(ticker)
    
    def _render_historical_analysis_section(self):
        """Render historical analysis section."""
        st.subheader("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå")
        
        # Get stored stocks for selection
        stored_stocks = self.enhanced_loader.list_stored_stocks()
        
        if not stored_stocks:
            st.info("üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        # Stock selection
        ticker_options = [stock['ticker'] for stock in stored_stocks]
        selected_ticker = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
            options=ticker_options,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ"
        )
        
        if selected_ticker:
            # Get available periods for the selected stock
            available_periods = self.enhanced_loader.get_available_periods(selected_ticker)
            
            if available_periods:
                analysis_period = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
                    options=available_periods,
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
                )
                
                if st.button("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                    self._perform_offline_analysis(selected_ticker, analysis_period)
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ")
    
    def _render_data_management_section(self):
        """Render data management section."""
        st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        stored_stocks = self.enhanced_loader.list_stored_stocks()
        
        if not stored_stocks:
            st.info("üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        # Delete stock data
        st.write("**‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô**")
        ticker_to_delete = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
            options=[stock['ticker'] for stock in stored_stocks],
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        )
        
        if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="secondary"):
            if st.session_state.get('confirm_delete'):
                success = self.enhanced_loader.delete_stored_stock(ticker_to_delete)
                if success:
                    st.success(f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker_to_delete} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.rerun()
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                st.session_state['confirm_delete'] = False
            else:
                st.session_state['confirm_delete'] = True
                st.warning(f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker_to_delete}? ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
    
    def _show_data_preview(self, ticker: str, data: Dict[str, Any]):
        """Show preview of stored data."""
        st.write("**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö:**")
        
        if 'historical_prices' in data and not data['historical_prices'].empty:
            hist_df = data['historical_prices'].tail(5)
            st.write("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ (5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):")
            st.dataframe(hist_df, use_container_width=True)
        
        if 'dividends' in data and not data['dividends'].empty:
            div_df = data['dividends'].tail(3)
            st.write("üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏• (3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):")
            st.dataframe(div_df, use_container_width=True)
    
    def _show_detailed_stock_data(self, ticker: str):
        """Show detailed stock data from database."""
        stored_data = self.enhanced_loader.get_stored_stock_data(ticker)
        
        if not stored_data:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ticker}")
            return
        
        st.write(f"**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î {ticker}**")
        
        # Current stock data
        if stored_data['stock_data']:
            stock_data = stored_data['stock_data']
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", f"${stock_data.get('current_price', 'N/A'):.2f}" if stock_data.get('current_price') else "N/A")
                st.metric("P/E Ratio", f"{stock_data.get('pe_ratio', 'N/A'):.2f}" if stock_data.get('pe_ratio') else "N/A")
            
            with col2:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", f"${stock_data.get('open_price', 'N/A'):.2f}" if stock_data.get('open_price') else "N/A")
                st.metric("EPS", f"${stock_data.get('eps'):.2f}" if stock_data.get('eps') is not None else "N/A")
            
            with col3:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"${stock_data.get('close_price', 'N/A'):.2f}" if stock_data.get('close_price') else "N/A")
                st.metric("ROE", f"{stock_data.get('roe', 'N/A'):.2%}" if stock_data.get('roe') else "N/A")
            
            with col4:
                st.metric("‡∏õ‡∏±‡∏ô‡∏ú‡∏•", f"{stock_data.get('dividend_yield', 'N/A'):.2%}" if stock_data.get('dividend_yield') else "N/A")
                st.metric("Market Cap", f"${stock_data.get('market_cap', 'N/A'):,.0f}" if stock_data.get('market_cap') else "N/A")
        
        # Historical price chart
        if stored_data['historical_data'] is not None and not stored_data['historical_data'].empty:
            st.write("**üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô**")
            hist_data = stored_data['historical_data']
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=hist_data.index,
                y=hist_data['close_price'],
                mode='lines',
                name='Close Price',
                line=dict(color='blue')
            ))
            
            fig.update_layout(
                title=f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {ticker}",
                xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Financial statements summary
        if stored_data['financial_statements']:
            st.write("**üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô**")
            
            financial_data = []
            for statement in stored_data['financial_statements']:
                financial_data.append({
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': statement['statement_type'],
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': statement['period_ending'],
                    '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°': f"${statement.get('total_revenue', 'N/A'):,.0f}" if statement.get('total_revenue') else "N/A",
                    '‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': f"${statement.get('net_income', 'N/A'):,.0f}" if statement.get('net_income') else "N/A",
                    '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏£‡∏ß‡∏°': f"${statement.get('total_assets', 'N/A'):,.0f}" if statement.get('total_assets') else "N/A"
                })
            
            if financial_data:
                df_financial = pd.DataFrame(financial_data)
                st.dataframe(df_financial, use_container_width=True, hide_index=True)
    
    def _perform_offline_analysis(self, ticker: str, period: str):
        """Perform offline analysis using stored data."""
        stored_data = self.enhanced_loader.get_stored_stock_data(ticker)
        
        if not stored_data or stored_data['historical_data'] is None or stored_data['historical_data'].empty:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
        
        hist_data = stored_data['historical_data']
        
        # Calculate period range
        if period == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            days = 30
        elif period == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            days = 90
        elif period == "1 ‡∏õ‡∏µ":
            days = 365
        else:
            days = 30
        
        end_date = hist_data.index.max()
        start_date = end_date - timedelta(days=days)
        period_data = hist_data[hist_data.index >= start_date]
        
        if period_data.empty:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            return
        
        st.success(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡∏ä‡πà‡∏ß‡∏á {period} (‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)")
        
        # Basic statistics
        col1, col2, col3, col4 = st.columns(4)
        
        start_price = period_data['close_price'].iloc[0]
        end_price = period_data['close_price'].iloc[-1]
        price_change = ((end_price - start_price) / start_price) * 100
        
        high_price = period_data['high_price'].max()
        low_price = period_data['low_price'].min()
        avg_volume = period_data['volume'].mean()
        
        with col1:
            st.metric("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤", f"{price_change:.2f}%")
        
        with col2:
            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"${high_price:.2f}")
        
        with col3:
            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"${low_price:.2f}")
        
        with col4:
            st.metric("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_volume:,.0f}")
        
        # Price chart for the period
        fig = go.Figure()
        
        fig.add_trace(go.Candlestick(
            x=period_data.index,
            open=period_data['open_price'],
            high=period_data['high_price'],
            low=period_data['low_price'],
            close=period_data['close_price'],
            name=ticker
        ))
        
        fig.update_layout(
            title=f"‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô {ticker} - {period}",
            xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
            yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Volume chart
        fig_vol = go.Figure()
        fig_vol.add_trace(go.Bar(
            x=period_data.index,
            y=period_data['volume'],
            name='Volume',
            marker_color='rgba(0,100,80,0.8)'
        ))
        
        fig_vol.update_layout(
            title=f"‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ {ticker} - {period}",
            xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
            yaxis_title="‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì",
            height=300
        )
        
        st.plotly_chart(fig_vol, use_container_width=True)